name: E2E tests for MeshSync

on: [push]
    # push:
    #   branches:
    #     - "*"   
    # pull_request:
    #   branches:
    #     - "*"
jobs: 
  e2e-test:
    name: End to End
    runs-on: ubuntu-22.04
    strategy: 
      fail-fast: false
      matrix:
        k8s_version: ['v1.27.3']
        # platform: ['docker', 'kubernetes']

    steps: 
      - name: Setup Kubernetes
        uses: manusa/actions-setup-minikube@v2.7.2
        with: 
          minikube version: 'v1.30.1'
          kubernetes version: ${{matrix.k8s_version}}
          driver: docker

      - name: Run minikube tunnel
        run: | 
          echo 'Running minikube tunnel'
          minikube tunnel $> /dev/null &
        shell: bash

      - name: Checkout Code
        uses: actions/checkout@master

      - name: Retrieve kubeconfig
        run: |
          echo "Before flattening"
          cat ~/.kube/config
          kubectl config view --minify --flatten > ~/.kube/configtemp
          mv ~/.kube/configtemp ~/.kube/config
          echo "After flattening"
          cat ~/.kube/config
        # Setup meshery config.yaml and auth.json
      - name: Setup meshery config and infinite token for use
        env:
            provider_token: ${{ secrets.token }}
        run: |
            echo $provider_token 
            mkdir ~/.meshery
            config='{"contexts":{"local":{"endpoint":"http://localhost:9081","token":"default","platform":"kubernetes","components":[],"channel":"stable","version":"latest"}},"current-context":"local","tokens":[{"location":"auth.json","name":"default"}]}'
            echo $config > ~/.meshery/config.yaml 
            cat ~/.meshery/config.yaml
            echo "Using provider: ${{ inputs.provider }}"
            if  [ "${{ inputs.provider }}" = "Meshery" ] && [ "$provider_token" != "" ] ;then
              echo '{ "meshery-provider": "Meshery", "token": null }' | jq -c '.token = "'$provider_token'"' > ~/.meshery/auth.json
            else
              echo '{ "meshery-provider": "None", "token": "" }'  > ~/.meshery/auth.json
            fi
            cat ~/.meshery/auth.json

            - name: Cluster info for debugging before starting Meshery
            run: kubectl get all -A
      # Start Meshery Server (Assuming that this step will create the meshery namespace)
      - name: Start Meshery Server using mesheryctl
        run: |
          curl -L https://meshery.io/install | PLATFORM=kubernetes bash -  
      - name: System Checks
        run: mesheryctl system check

      - name: Build MeshSync docker image
        run: |
          docker build -t meshery-meshsync:test .
      - name: Replace MeshSync 
        run: |
          # Set your deployment name, container name, new image version, and new image pull policy
          DEPLOYMENT_NAME="meshery-meshsync"
          CONTAINER_NAME="meshsync"
          NEW_IMAGE_VERSION="meshery-meshsync:test"
          NEW_IMAGE_PULL_POLICY="Never"  
          NAMESPACE="meshery"
          # Update the deployment with the new image and pull policy
          kubectl scale --replicas=0 deployment ${DEPLOYMENT_NAME} -n meshery
          kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${NEW_IMAGE_VERSION} -n $NAMESPACE
          kubectl patch -n meshery deployment meshery-meshsync -p '{"spec":{"template":{"spec":{"containers":[{"name":"meshsync","imagePullPolicy":"IfNotPresent", "image":$NEW_IMAGE_VERSION}]}}}}'
          kubectl scale --replicas=1 deployment ${DEPLOYMENT_NAME} -n meshery

          kubectl describe deployment -n $NAMESPACE ${DEPLOYMENT_NAME}
        shell: bash